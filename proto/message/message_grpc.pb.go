// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: proto/message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	CreateMessage(ctx context.Context, in *RequestCreateMessage, opts ...grpc.CallOption) (*ResponseCreateMessage, error)
	ReadMessage(ctx context.Context, in *RequestReadMessage, opts ...grpc.CallOption) (*ResponseReadMessage, error)
	DecryptChannel(ctx context.Context, in *RequestDecryptChannel, opts ...grpc.CallOption) (*ResponseDecryptChannel, error)
	FinishChannel(ctx context.Context, in *RequestFinishChannel, opts ...grpc.CallOption) (*ResponseFinishChannel, error)
	PushMessage(ctx context.Context, in *RequestPushMessage, opts ...grpc.CallOption) (*ResponsePushMessage, error)
	CreateBotMessage(ctx context.Context, in *RequestBotMessage, opts ...grpc.CallOption) (*ResponseBotMessage, error)
	CreateChannel(ctx context.Context, in *RequestCreateChannel, opts ...grpc.CallOption) (*ResponseCreateChannel, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) CreateMessage(ctx context.Context, in *RequestCreateMessage, opts ...grpc.CallOption) (*ResponseCreateMessage, error) {
	out := new(ResponseCreateMessage)
	err := c.cc.Invoke(ctx, "/message.MessageService/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ReadMessage(ctx context.Context, in *RequestReadMessage, opts ...grpc.CallOption) (*ResponseReadMessage, error) {
	out := new(ResponseReadMessage)
	err := c.cc.Invoke(ctx, "/message.MessageService/ReadMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) DecryptChannel(ctx context.Context, in *RequestDecryptChannel, opts ...grpc.CallOption) (*ResponseDecryptChannel, error) {
	out := new(ResponseDecryptChannel)
	err := c.cc.Invoke(ctx, "/message.MessageService/DecryptChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) FinishChannel(ctx context.Context, in *RequestFinishChannel, opts ...grpc.CallOption) (*ResponseFinishChannel, error) {
	out := new(ResponseFinishChannel)
	err := c.cc.Invoke(ctx, "/message.MessageService/FinishChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) PushMessage(ctx context.Context, in *RequestPushMessage, opts ...grpc.CallOption) (*ResponsePushMessage, error) {
	out := new(ResponsePushMessage)
	err := c.cc.Invoke(ctx, "/message.MessageService/PushMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) CreateBotMessage(ctx context.Context, in *RequestBotMessage, opts ...grpc.CallOption) (*ResponseBotMessage, error) {
	out := new(ResponseBotMessage)
	err := c.cc.Invoke(ctx, "/message.MessageService/CreateBotMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) CreateChannel(ctx context.Context, in *RequestCreateChannel, opts ...grpc.CallOption) (*ResponseCreateChannel, error) {
	out := new(ResponseCreateChannel)
	err := c.cc.Invoke(ctx, "/message.MessageService/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	CreateMessage(context.Context, *RequestCreateMessage) (*ResponseCreateMessage, error)
	ReadMessage(context.Context, *RequestReadMessage) (*ResponseReadMessage, error)
	DecryptChannel(context.Context, *RequestDecryptChannel) (*ResponseDecryptChannel, error)
	FinishChannel(context.Context, *RequestFinishChannel) (*ResponseFinishChannel, error)
	PushMessage(context.Context, *RequestPushMessage) (*ResponsePushMessage, error)
	CreateBotMessage(context.Context, *RequestBotMessage) (*ResponseBotMessage, error)
	CreateChannel(context.Context, *RequestCreateChannel) (*ResponseCreateChannel, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) CreateMessage(context.Context, *RequestCreateMessage) (*ResponseCreateMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedMessageServiceServer) ReadMessage(context.Context, *RequestReadMessage) (*ResponseReadMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMessage not implemented")
}
func (UnimplementedMessageServiceServer) DecryptChannel(context.Context, *RequestDecryptChannel) (*ResponseDecryptChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptChannel not implemented")
}
func (UnimplementedMessageServiceServer) FinishChannel(context.Context, *RequestFinishChannel) (*ResponseFinishChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishChannel not implemented")
}
func (UnimplementedMessageServiceServer) PushMessage(context.Context, *RequestPushMessage) (*ResponsePushMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMessage not implemented")
}
func (UnimplementedMessageServiceServer) CreateBotMessage(context.Context, *RequestBotMessage) (*ResponseBotMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBotMessage not implemented")
}
func (UnimplementedMessageServiceServer) CreateChannel(context.Context, *RequestCreateChannel) (*ResponseCreateChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CreateMessage(ctx, req.(*RequestCreateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ReadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReadMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ReadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/ReadMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ReadMessage(ctx, req.(*RequestReadMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_DecryptChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDecryptChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).DecryptChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/DecryptChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).DecryptChannel(ctx, req.(*RequestDecryptChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_FinishChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFinishChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).FinishChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/FinishChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).FinishChannel(ctx, req.(*RequestFinishChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_PushMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPushMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).PushMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/PushMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).PushMessage(ctx, req.(*RequestPushMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_CreateBotMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBotMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CreateBotMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/CreateBotMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CreateBotMessage(ctx, req.(*RequestBotMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CreateChannel(ctx, req.(*RequestCreateChannel))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler:    _MessageService_CreateMessage_Handler,
		},
		{
			MethodName: "ReadMessage",
			Handler:    _MessageService_ReadMessage_Handler,
		},
		{
			MethodName: "DecryptChannel",
			Handler:    _MessageService_DecryptChannel_Handler,
		},
		{
			MethodName: "FinishChannel",
			Handler:    _MessageService_FinishChannel_Handler,
		},
		{
			MethodName: "PushMessage",
			Handler:    _MessageService_PushMessage_Handler,
		},
		{
			MethodName: "CreateBotMessage",
			Handler:    _MessageService_CreateBotMessage_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _MessageService_CreateChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message.proto",
}
